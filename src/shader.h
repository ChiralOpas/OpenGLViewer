#ifndef SHADER_H
#define SHADER_H

#include <string>

class Shader
{
public:
	Shader();
	~Shader();

	/*!
	 * Construct shader program
	 *
	 * \param vertexPath : path till vertex shader
	 * \param fragmentPath : path till fragment shader
	 */
	Shader(const char* vertexPath, const char* fragmentPath);
	
	/*!
	 * Using the Shader program
	 *
	 */
	void use();

	unsigned int m_ShaderID;

private:
	
	/*!
	* Shader Compilation
	*
	* \param source : shader source to compile
	* \param type : type of shader as defined in OpenGL
	* \return : shader id generated by compilation in OpenGL server
	*/
	unsigned int CompileShader(const std::string& source, unsigned int type);
	
	/*!
	 * Checking for compilation error
	 *
	 * \param component_id : as generated by OpenGL server
	 * \param type : type of component we want to check.
	 * should be pass in string like PROGRAM/VERTEX/FRAGMENT
	 * \return : true(bool) if compilation error else false(bool)
	 */
	bool IsCompileError(unsigned int component_id, std::string type);
};
#endif